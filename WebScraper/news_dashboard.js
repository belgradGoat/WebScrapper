// Extracted JS from news_dashboard.html to external file
const CONFIG = { gnewsApiUrl: 'http://localhost:3000/api/news', translationEnabled: true, maxArticlesPerSection: 100, articlesPerPage: 10, refreshInterval: 300000, supportedLanguages: ['en','pl'] }; CONFIG.gemmaApiUrl='http://localhost:3000/api/summarize-gemma'; CONFIG.summariesApiUrl='http://localhost:3000/api/summaries';
const CACHE_DURATION = 5*60*1000; const apiCache=new Map(); let currentSummary=null; let summaryHistory=[];
let newsSections=[ { id:3, title:'News Aggregator', keyword:'Conflict', language:'en', articles:[], displayedCount:0 } ];
let blueskyData={ posts:[], displayedCount:0, query:'Foreign Affairs Minister', loading:false };
let redditData={ posts:[], displayedCount:0, postsPerPage:10, query:'Foreign Affairs Minister', loading:false };
let weatherData={ current:null, forecast:[], location:null, alerts:[], loading:false, lastUpdate:null };
function initDashboard(){ console.log('🚀 Initializing dashboard...'); updateLastUpdate(); const weatherContainer=document.getElementById('weather-container'); if(weatherContainer && !weatherContainer.querySelector('.weather-section')){ const weatherSection=createWeatherSection(); weatherContainer.appendChild(weatherSection);} renderSections(); startAutoRefresh(); setTimeout(()=>{ const defaultKeyword=document.getElementById('globalKeyword').value||'Foreign Affairs Minister'; console.log('🔄 Loading initial data for:',defaultKeyword); Promise.all([ loadWeatherData(), globalSearch() ]).then(()=>{ console.log('✅ Initial load complete');}).catch(e=>{ console.error('❌ Error during initial load:',e);}); },1000);} 
function updateLastUpdate(){ const now=new Date(); const el=document.getElementById('lastUpdate'); if(el) el.textContent=`Last updated: ${now.toLocaleString()}`; }
function renderSections(){ const grid=document.getElementById('dashboardGrid'); if(!grid) return; const sectionsToRemove=grid.querySelectorAll('.section:not(#global-brief-section)'); sectionsToRemove.forEach(s=>s.remove()); newsSections.forEach(section=>{ grid.appendChild(createNewsSection(section)); }); grid.appendChild(createBlueskySection()); grid.appendChild(createRedditSection()); }
async function globalSearch(){ const keyword=document.getElementById('globalKeyword')?.value?.trim(); if(!keyword){ showStatus('Please enter a search keyword','error'); return;} showStatus(`Searching all feeds for "${keyword}"...`,'info'); newsSections.forEach(section=>{ section.keyword=keyword; section.articles=[]; section.displayedCount=0; }); blueskyData.query=keyword; redditData.query=keyword; redditData.displayedCount=0; const blueskyInput=document.getElementById('blueskyKeyword'); const redditInput=document.getElementById('redditKeyword'); if(blueskyInput) blueskyInput.value=keyword; if(redditInput) redditInput.value=keyword; try { await Promise.all([ ...newsSections.map(section=>loadNewsForSection(section)), searchBlueskyInternal(keyword), searchRedditInternal(keyword) ]); showStatus(`Search completed for "${keyword}"`,'success'); } catch(e){ console.error('Global search error:',e); showStatus('Some searches failed','warning'); } }
function refreshAll(){ showStatus('Refreshing all sections...','info'); apiCache.clear(); refreshWeather(); globalSearch(); }
function showStatus(message,type='info'){ const indicator=document.getElementById('statusIndicator'); if(indicator){ indicator.textContent=message; indicator.className=`status-indicator ${type}`; indicator.style.display='block'; setTimeout(()=>{ indicator.style.display='none';},3000);} }
function createWeatherSection(){ const div=document.createElement('div'); div.className='weather-compact'; div.innerHTML=`<div><div class="weather-location" id="weather-location">📍 Loading location...</div><div class="weather-info"><div class="weather-current-temp" id="weather-current">--°F</div><div class="weather-high-low"><div class="label">High/Low</div><div class="temp" id="weather-high-low">--° / --°</div></div><div class="weather-rain"><div class="label">Rain Chance</div><div class="chance" id="weather-rain">--%</div></div></div></div><div class="weather-controls"><button class="btn btn-secondary" onclick="refreshWeather()" style="padding:8px 12px;font-size:0.8em;">🔄</button><button class="btn btn-secondary" onclick="getCurrentLocationWeather()" style="padding:8px 12px;font-size:0.8em;">📍</button></div>`; return div; }
async function loadWeatherData(lat=null,lon=null){ try{ weatherData.loading=true; const requestBody={}; if(lat&&lon){ requestBody.lat=lat; requestBody.lon=lon; } const response=await fetch('http://localhost:3000/api/weather',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(requestBody)}); if(!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`); const data=await response.json(); if(data.success){ weatherData.current=data.current; weatherData.forecast=data.forecast; weatherData.location=data.location; weatherData.alerts=data.alerts||[]; weatherData.lastUpdate=new Date(); displayWeatherData(); console.log(`✅ Weather data loaded for ${data.location.city}, ${data.location.state}`);} else { throw new Error(data.error||'Invalid response from weather API'); } } catch(e){ console.error('❌ Weather loading error:',e); } finally { weatherData.loading=false; } }
function displayWeatherData(){ const locationDiv=document.getElementById('weather-location'); const currentDiv=document.getElementById('weather-current'); const highLowDiv=document.getElementById('weather-high-low'); const rainDiv=document.getElementById('weather-rain'); if(!weatherData.forecast||!locationDiv||!currentDiv||!highLowDiv||!rainDiv) return; const current=weatherData.current; const location=weatherData.location; const forecast=weatherData.forecast; locationDiv.textContent=`📍 ${location.city}, ${location.state}`; currentDiv.textContent = (current && current.temperature_f) ? `${current.temperature_f}°F` : '--°F'; const today=forecast.find(p=> p.name.toLowerCase().includes('today')|| p.name.toLowerCase().includes('this afternoon')|| p.is_daytime ); const tonight=forecast.find(p=> p.name.toLowerCase().includes('tonight')|| p.name.toLowerCase().includes('night')|| !p.is_daytime ); if(today && tonight){ highLowDiv.textContent=`${today.temperature}° / ${tonight.temperature}°`; } else if(today){ highLowDiv.textContent=`${today.temperature}° / --°`; } else { highLowDiv.textContent='--° / --°'; } let rainChance='--'; if(today && today.detailed_forecast){ const rainMatch=today.detailed_forecast.match(/(\d+)\s*percent.*rain|rain.*(\d+)\s*percent/i); if(rainMatch){ rainChance=rainMatch[1]||rainMatch[2]; } else if(today.detailed_forecast.toLowerCase().includes('rain')){ rainChance='Yes'; } else { rainChance='0'; } } rainDiv.textContent = rainChance==='Yes' ? 'Yes' : `${rainChance}%`; if(rainChance!=='--' && rainChance!=='Yes'){ const chance=parseInt(rainChance); if(chance>70) rainDiv.style.color='#dc3545'; else if(chance>30) rainDiv.style.color='#ffc107'; else rainDiv.style.color='#28a745'; } }
function refreshWeather(){ if(weatherData.location){ loadWeatherData(weatherData.location.lat,weatherData.location.lon);} else { loadWeatherData(); } }
function getCurrentLocationWeather(){ if(navigator.geolocation){ showStatus('Getting your location...','info'); navigator.geolocation.getCurrentPosition(async pos=>{ try{ await loadWeatherData(pos.coords.latitude,pos.coords.longitude); showStatus('Weather updated with your location','success'); } catch(e){ showStatus('Failed to get weather for your location','error'); } },()=>{ showStatus('Location access denied','warning'); loadWeatherData(); }); } else { showStatus('Geolocation not supported','warning'); loadWeatherData(); } }
function createNewsSection(section){ const div=document.createElement('div'); div.className='section'; div.id=`section-${section.id}`; div.innerHTML=`<div class="section-header"><h2 class="section-title">${section.title}</h2><div class="section-controls"><div class="source-filter-dropdown"><button class="source-filter-button" onclick="toggleSourceFilter(${section.id}, event)"><span>🔍 Sources</span><span class="filtered-indicator" id="filter-indicator-${section.id}" style="display:none;">(Filtered)</span></button><div class="source-filter-content" id="source-filter-${section.id}"><div id="source-checkboxes-${section.id}"><div class="source-filter-item"><em>Loading sources...</em></div></div><div class="source-filter-actions"><button class="btn btn-secondary" onclick="selectAllSources(${section.id})">Select All</button><button class="btn btn-secondary" onclick="deselectAllSources(${section.id})">Deselect All</button></div></div></div><button class="btn btn-secondary" onclick="refreshSection(${section.id})">🔄</button><button class="btn btn-secondary" onclick="removeSection(${section.id})">❌</button></div></div><div class="section-content" id="content-${section.id}"><div class="loading">Loading news...</div></div><div class="show-more-container" id="showmore-${section.id}" style="display:none;"><button class="btn-show-more" onclick="showMoreArticles(${section.id})" id="showmore-btn-${section.id}">Show More Articles</button></div>`; return div; }
async function loadNewsForSection(section){ try{ console.log(`Loading news for section: ${section.title}`); const articles=await fetchGNewsArticles(section.keyword,section.language,CONFIG.maxArticlesPerSection); section.articles=articles; section.displayedCount=0; displayNewsArticlesWithPagination(section.id,section); const dropdown=document.getElementById(`source-filter-${section.id}`); if(dropdown && dropdown.classList.contains('show')) populateSourceFilter(section.id); showStatus(`Loaded ${articles.length} articles for ${section.title}`,'success'); } catch(e){ console.error('Error loading news:',e); displayError(section.id,`Failed to load news: ${e.message}`);} }
async function fetchGNewsArticles(keyword,language,maxResults){ const cacheKey=`${keyword}-${language}-${maxResults}`; const cached=apiCache.get(cacheKey); if(cached && (Date.now()-cached.timestamp)<CACHE_DURATION) return cached.data; const params=new URLSearchParams({ q:keyword, lang:language, max:maxResults }); const response=await fetch(`${CONFIG.gnewsApiUrl}?${params.toString()}`); if(!response.ok) throw new Error(`HTTP error! status: ${response.status}`); const data=await response.json(); if(data.articles && Array.isArray(data.articles)){ apiCache.set(cacheKey,{ data:data.articles, timestamp:Date.now()}); return data.articles; } throw new Error('Invalid response format from news API'); }
function displayNewsArticlesWithPagination(sectionId,section){ const contentDiv=document.getElementById(`content-${sectionId}`); const showMoreContainer=document.getElementById(`showmore-${sectionId}`); if(!section.articles||section.articles.length===0){ contentDiv.innerHTML='<p>No articles found for this search.</p>'; showMoreContainer.style.display='none'; return;} const sourcePreferences=getSourcePreferences(sectionId); const filtered=section.articles.filter(a=> !a.source||!a.source.name || sourcePreferences[a.source.name]!==false ); const withDates=filtered.map(a=>({...a, correctedDate:extractDateFromContent(a), displayDate:new Date(extractDateFromContent(a))})); withDates.sort((a,b)=> b.displayDate - a.displayDate); const perPage=CONFIG.articlesPerPage; const currently=Math.min(section.displayedCount+perPage, withDates.length); const toShow=withDates.slice(0,currently); if(toShow.length===0){ contentDiv.innerHTML='<p>No articles match your selected sources. Try enabling more sources.</p>'; showMoreContainer.style.display='none'; return;} const html=toShow.map(article=>{ const dateStr=article.displayDate.toLocaleDateString('en-US',{ year:'numeric', month:'short', day:'numeric'}); const dateWasCorrected=article.correctedDate!==article.publishedAt; const dateIcon=dateWasCorrected?'📅 ':''; return `<div class="news-item"><div class="news-title"><a href="${article.url}" target="_blank">${article.title}</a></div><div class="news-meta">${article.source?.name||'Unknown Source'} • ${dateIcon}${dateStr} ${dateWasCorrected?'<span style="color:#666;font-size:0.8em;"> (date corrected)</span>':''}</div><div class="news-summary">${article.description||'No description available.'}</div></div>`; }).join(''); contentDiv.innerHTML=html; section.displayedCount=currently; if(withDates.length>perPage){ showMoreContainer.style.display='block'; const btn=document.getElementById(`showmore-btn-${sectionId}`); if(currently>=withDates.length){ btn.disabled=true; btn.textContent='All Articles Loaded'; } else { btn.disabled=false; btn.textContent='Show More Articles'; } } else { showMoreContainer.style.display='none'; } }
function showMoreArticles(id){ const section=newsSections.find(s=>s.id===id); if(section) displayNewsArticlesWithPagination(id,section); }
function refreshSection(id){ const section=newsSections.find(s=>s.id===id); if(section){ section.articles=[]; section.displayedCount=0; loadNewsForSection(section);} }
function removeSection(id){ newsSections=newsSections.filter(s=>s.id!==id); renderSections(); showStatus('Section removed','info'); }
function displayError(id,msg){ const contentDiv=document.getElementById(`content-${id}`); if(contentDiv) contentDiv.innerHTML=`<div class="error">${msg}</div>`; }
function createBlueskySection(){ const div=document.createElement('div'); div.className='section'; div.id='bluesky-section'; div.innerHTML=`<div class="section-header"><h2 class="section-title">🦋 Bluesky Feed</h2><div class="section-controls"><button class="btn btn-secondary" onclick="refreshBluesky()">🔄</button></div></div><div style="margin-bottom:20px;"><input type="text" id="blueskyKeyword" placeholder="Search Bluesky..." value="Foreign Affairs Minister" style="width:70%;padding:8px;"><button class="btn btn-primary" onclick="searchBluesky()" style="margin-left:10px;">Search</button></div><div class="section-content" id="bluesky-content"><div class="loading">Loading Bluesky posts...</div></div>`; return div; }
async function searchBluesky(){ const input=document.getElementById('blueskyKeyword'); const q=input.value.trim(); if(!q){ showStatus('Please enter a search keyword','error'); return;} await searchBlueskyInternal(q); }
async function searchBlueskyInternal(query){ try{ blueskyData.loading=true; blueskyData.query=query; const content=document.getElementById('bluesky-content'); if(content) content.innerHTML=`<div class="loading">Searching Bluesky for "${query}"...</div>`; const response=await fetch('http://localhost:3000/api/bluesky',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({ query:query, limit:100 })}); if(!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`); const data=await response.json(); if(data.success && data.posts){ blueskyData.posts=data.posts; displayBlueskyPosts(); console.log(`✅ Found ${data.posts.length} Bluesky posts`);} else { throw new Error(data.error||'Invalid response from Bluesky API'); } } catch(e){ console.error('❌ Bluesky search error:',e); const content=document.getElementById('bluesky-content'); if(content) content.innerHTML=`<div class="error">Failed to search Bluesky: ${e.message}</div>`; } finally { blueskyData.loading=false; } }
function displayBlueskyPosts(){ const content=document.getElementById('bluesky-content'); if(!blueskyData.posts||blueskyData.posts.length===0){ content.innerHTML='<p>No posts found.</p>'; return;} content.innerHTML=blueskyData.posts.slice(0,10).map(post=>`<div class="social-item clickable-post" onclick="window.open('${post.url}','_blank')"><div style="font-weight:600;">@${post.author.handle}</div><div style="margin:8px 0;">${post.text}</div><div style="font-size:0.85em;color:#6c757d;">❤️ ${post.engagement.likes} | 🔄 ${post.engagement.reposts} | 💬 ${post.engagement.replies}</div></div>`).join(''); }
function refreshBluesky(){ const keyword=document.getElementById('blueskyKeyword')?.value||blueskyData.query; searchBlueskyInternal(keyword); }
function createRedditSection(){ const div=document.createElement('div'); div.className='section'; div.id='reddit-section'; div.innerHTML=`<div class="section-header"><h2 class="section-title">🟠 Reddit Feed</h2><div class="section-controls"><button class="btn btn-secondary" onclick="refreshReddit()">🔄</button></div></div><div style="margin-bottom:20px;"><input type="text" id="redditKeyword" placeholder="Search Reddit..." value="Foreign Affairs Minister" style="width:70%;padding:8px;"><button class="btn btn-primary" onclick="searchReddit()" style="margin-left:10px;">Search</button></div><div class="section-content" id="reddit-content"><div class="loading">Loading Reddit posts...</div></div>`; return div; }
async function searchReddit(){ const input=document.getElementById('redditKeyword'); const q=input.value.trim(); if(!q){ showStatus('Please enter a search keyword','error'); return;} await searchRedditInternal(q); }
async function searchRedditInternal(query){ try{ redditData.loading=true; redditData.query=query; redditData.displayedCount=0; const content=document.getElementById('reddit-content'); if(content) content.innerHTML=`<div class="loading">Searching Reddit for "${query}"...</div>`; const response=await fetch('http://localhost:3000/api/reddit',{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({ query:query, limit:100 })}); if(!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`); const data=await response.json(); if(data.success && data.posts){ redditData.posts=data.posts; displayRedditPosts(); console.log(`✅ Found ${data.posts.length} Reddit posts`);} else { throw new Error(data.error||'Invalid response from Reddit API'); } } catch(e){ console.error('❌ Reddit search error:',e); const content=document.getElementById('reddit-content'); if(content) content.innerHTML=`<div class="error">Failed to search Reddit: ${e.message}</div>`; } finally { redditData.loading=false; } }
function displayRedditPosts(){ const content=document.getElementById('reddit-content'); if(!redditData.posts||redditData.posts.length===0){ content.innerHTML='<p>No posts found.</p>'; return;} const currently=Math.min(redditData.displayedCount+redditData.postsPerPage, redditData.posts.length); const postsToShow=redditData.posts.slice(0,currently); const postsHTML=postsToShow.map((post,index)=>{ const fullText=post.text||''; const isLong=fullText.length>200; const truncated=isLong?fullText.substring(0,200)+'...':fullText; return `<div class="social-item clickable-post" onclick="window.open('${post.url}','_blank')"><div style="font-weight:600;">${post.title}</div><div style="margin:8px 0;font-size:0.9em;">r/${post.subreddit} • u/${post.author.username}</div><div class="reddit-post-text" id="reddit-text-${index}"><span id="reddit-preview-${index}" ${isLong?'':'style="display:none;"'}>${truncated}</span><span id="reddit-full-${index}" style="display:none;">${fullText}</span>${isLong?`<button class="reddit-show-more-btn" id="reddit-btn-${index}" onclick="event.stopPropagation(); toggleRedditPost(${index})">Show More</button>`:''}</div><div style="font-size:0.85em;color:#6c757d;">Score: ${post.engagement.score} | 💬 ${post.engagement.comments} | 👍 ${post.engagement.upvotes}%</div></div>`; }).join(''); redditData.displayedCount=currently; const showMoreBtn = redditData.posts.length>currently ? `<div class="show-more-container" style="text-align:center;margin-top:20px;"><button class="btn-show-more" onclick="showMoreRedditPosts()" id="reddit-posts-btn">Show More Posts (${redditData.posts.length-currently} remaining)</button></div>` : `<div class="pagination-info" style="text-align:center;margin-top:15px;color:#6c757d;">Showing all ${redditData.posts.length} posts</div>`; content.innerHTML=postsHTML+showMoreBtn; }
function toggleRedditPost(i){ const preview=document.getElementById(`reddit-preview-${i}`); const full=document.getElementById(`reddit-full-${i}`); const btn=document.getElementById(`reddit-btn-${i}`); if(preview && full && btn){ const expanded=full.style.display!=='none'; if(expanded){ preview.style.display='inline'; full.style.display='none'; btn.textContent='Show More'; } else { preview.style.display='none'; full.style.display='inline'; btn.textContent='Show Less'; } } }
function showMoreRedditPosts(){ const btn=document.getElementById('reddit-posts-btn'); if(btn){ btn.disabled=true; btn.textContent='Loading more posts...'; setTimeout(()=>displayRedditPosts(),500); } }
function refreshReddit(){ const keyword=document.getElementById('redditKeyword')?.value||redditData.query; searchRedditInternal(keyword); }
async function generateGlobalBrief(){ const briefSection=document.getElementById('global-brief-section'); const briefContent=document.getElementById('global-brief-content'); if(briefSection) briefSection.style.display='block'; if(briefContent){ briefContent.innerHTML=`<div class="summary-section"><div class="summary-controls"><button class="btn btn-primary" onclick="generateGemmaSummary()">🤖 Generate AI Brief</button><button class="btn btn-secondary" onclick="loadSummaryHistory()">📚 View History</button><button class="btn btn-secondary" onclick="document.getElementById('global-brief-section').style.display='none'">❌ Close</button></div><div id="summary-content"><p>Click "Generate AI Brief" to create an intelligent summary using Gemma AI.</p><p><strong>Summary Features:</strong></p><ul><li>70% focus on reliable news sources (Reuters, BBC, AP, Guardian)</li><li>30% social media context (Reddit, Bluesky)</li><li>Stored in MongoDB for historical tracking</li><li>Source reliability weighting applied</li></ul></div></div>`; } }
async function generateGemmaSummary(){ const summaryContent=document.getElementById('summary-content'); if(!summaryContent) return; summaryContent.innerHTML='<div class="loading">Generating intelligent summary with Gemma AI...</div>'; try { const allArticles=[]; newsSections.forEach(section=>{ if(section.articles){ section.articles.forEach(article=>{ allArticles.push({ ...article, source:{ ...article.source, type: article.source?.type||'News' } }); }); } }); if(blueskyData.posts){ blueskyData.posts.forEach(post=> allArticles.push({ title:post.text, description:post.text, source:{ name:'Bluesky', type:'bluesky' }, publishedAt:new Date().toISOString() })); } if(redditData.posts){ redditData.posts.forEach(post=> allArticles.push({ title:post.title, description:post.text||post.title, source:{ name:'Reddit', type:'reddit' }, publishedAt:new Date().toISOString() })); } if(allArticles.length===0){ summaryContent.innerHTML='<div class="error"><h3>❌ No Articles Available</h3><p>No articles found for summarization.</p></div>'; return;} const keyword=document.getElementById('globalKeyword')?.value||'Global Update'; const requestBody={ articles:allArticles, prompt:`Create a comprehensive analysis of "${keyword}" based on the following sources. Focus primarily on news sources and use social media as supporting context.` }; const response=await fetch(CONFIG.gemmaApiUrl,{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(requestBody) }); if(!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`); const result=await response.json(); if(result.error || !result.success || !result.summary) throw new Error(result.error||'Invalid response format'); currentSummary=result; displayGemmaSummary(result); } catch(e){ summaryContent.innerHTML=`<div class="error"><h3>❌ Summary Generation Failed</h3><p>${e.message}</p></div>`; } }
function displayGemmaSummary(summaryData){ const summaryContent=document.getElementById('summary-content'); if(!summaryContent) return; const timestamp=new Date(summaryData.timestamp).toLocaleString(); summaryContent.innerHTML=`<div class="summary-meta"><div><strong>Generated:</strong> ${timestamp}<br><strong>Model:</strong> Gemma 2 <strong>ID:</strong> ${summaryData.summary_id||'N/A'}</div><div><strong>Saved to MongoDB</strong> ✅</div></div><div class="source-breakdown"><div class="source-stat"><strong>${summaryData.source_breakdown.news_sources}</strong><br>News Sources (70%)</div><div class="source-stat"><strong>${summaryData.source_breakdown.social_sources}</strong><br>Social Media (30%)</div><div class="source-stat"><strong>${summaryData.source_breakdown.total_articles}</strong><br>Total Articles</div></div><div style="background:rgba(255,255,255,0.1);padding:20px;border-radius:8px;line-height:1.6;">${summaryData.summary.replace(/\n/g,'<br>')}</div><div style="margin-top:20px;text-align:center;"><button class="btn btn-secondary" onclick="loadSummaryHistory()">📚 View History</button><button class="btn btn-secondary" onclick="downloadSummary()">💾 Download</button></div>`; }
async function loadSummaryHistory(){ const summaryContent=document.getElementById('summary-content'); if(!summaryContent) return; summaryContent.innerHTML='<div class="loading">Loading summary history from MongoDB...</div>'; try { const response=await fetch(CONFIG.summariesApiUrl); if(!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`); const result=await response.json(); if(result.error) throw new Error(result.error); summaryHistory=result.summaries||[]; displaySummaryHistory(); } catch(e){ summaryContent.innerHTML=`<div class="error">Failed to load history: ${e.message}</div>`; } }
function displaySummaryHistory(){ const summaryContent=document.getElementById('summary-content'); if(!summaryContent) return; if(summaryHistory.length===0){ summaryContent.innerHTML='<div style="text-align:center;padding:20px;"><h3>📚 Summary History</h3><p>No summaries found.</p><button class="btn btn-primary" onclick="generateGemmaSummary()">Generate First Summary</button></div>'; return;} const historyHTML=summaryHistory.map((s,i)=>{ const date=new Date(s.timestamp).toLocaleString(); const preview=s.summary.substring(0,100)+'...'; return `<div class="history-item" onclick="displayHistoricalSummary(${i})"><div style="font-weight:600;margin-bottom:5px;">${date}</div><div style="font-size:0.9em;opacity:0.8;">${preview}</div><div style="font-size:0.8em;margin-top:5px;">📰 ${s.source_breakdown.news_sources} news • 💬 ${s.source_breakdown.social_sources} social</div></div>`; }).join(''); summaryContent.innerHTML=`<div style="text-align:center;margin-bottom:20px;"><h3>📚 Summary History (${summaryHistory.length} items)</h3><button class="btn btn-primary" onclick="generateGemmaSummary()">Generate New Summary</button></div><div class="summary-history">${historyHTML}</div>`; }
function displayHistoricalSummary(i){ if(!summaryHistory[i]) return; const summary=summaryHistory[i]; currentSummary=summary; displayGemmaSummary({ ...summary, summary_id:summary._id }); }
function downloadSummary(){ if(!currentSummary) return; const content=`Eagle Watchtower - AI Summary Report\nGenerated: ${new Date(currentSummary.timestamp).toLocaleString()}\nModel: Gemma 2\nSearch Term: ${currentSummary.search_term}\n\nSource Breakdown:\n- News Sources: ${currentSummary.source_breakdown.news_sources} (70% weight)\n- Social Media: ${currentSummary.source_breakdown.social_sources} (30% weight)\n- Total Articles: ${currentSummary.source_breakdown.total_articles}\n\nSummary:\n${currentSummary.summary}\n\n---\nGenerated by Eagle Watchtower Dashboard\nPowered by Gemma AI and MongoDB`; const blob=new Blob([content],{type:'text/plain'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=`eagle-watchtower-summary-${new Date().toISOString().split('T')[0]}.txt`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); }
function startAutoRefresh(){ setInterval(()=>{ updateLastUpdate(); }, CONFIG.refreshInterval); }
function addNewSection(){ document.getElementById('addSectionForm')?.classList.add('active'); }
function cancelAddSection(){ const form=document.getElementById('addSectionForm'); if(form) form.classList.remove('active'); ['sectionKeyword','sectionTitle','sectionLanguage'].forEach(id=>{ const el=document.getElementById(id); if(el) el.value = id==='sectionLanguage' ? 'en' : ''; }); }
function createSection(){ const keyword=document.getElementById('sectionKeyword')?.value?.trim(); const title=document.getElementById('sectionTitle')?.value?.trim(); const language=document.getElementById('sectionLanguage')?.value; if(!keyword||!title){ showStatus('Please fill in all required fields','error'); return;} const newSection={ id:Date.now(), title, keyword, language, articles:[], displayedCount:0 }; newsSections.push(newSection); renderSections(); loadNewsForSection(newSection); cancelAddSection(); showStatus(`Created new section: ${title}`,'success'); }
function toggleTranslation(){ CONFIG.translationEnabled=!CONFIG.translationEnabled; const status=document.getElementById('translationStatus'); if(status) status.textContent=CONFIG.translationEnabled?'ON':'OFF'; showStatus(`Translation ${CONFIG.translationEnabled?'enabled':'disabled'}`,'info'); }
function extractDateFromContent(article){ const existingDate=new Date(article.publishedAt); const today=new Date(); const isSuspicious= existingDate.toDateString()===today.toDateString(); if(!isSuspicious && existingDate<today) return article.publishedAt; const searchText=(article.description||'')+' '+(article.content||''); const datePatterns=[ /(\d{1,2})\s+(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+(\d{4})/i, /(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+(\d{1,2}),?\s+(\d{4})/i, /(\d{4})[-\/](\d{1,2})[-\/](\d{1,2})/, /(\d{1,2})[-\/](\d{1,2})[-\/]?(\d{4})/, /(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})/, /(?:Published|Updated|Posted):\s*(\w+\s+\d{1,2},?\s+\d{4})/i, /(\d+)\s+(hours?|days?|weeks?|months?)\s+ago/i ]; for(const pattern of datePatterns){ const match=searchText.match(pattern); if(match){ try { let extracted; if(match[0].includes('ago')){ const amount=parseInt(match[1]); const unit=match[2].toLowerCase(); extracted=new Date(); if(unit.includes('hour')) extracted.setHours(extracted.getHours()-amount); else if(unit.includes('day')) extracted.setDate(extracted.getDate()-amount); else if(unit.includes('week')) extracted.setDate(extracted.getDate()-(amount*7)); else if(unit.includes('month')) extracted.setMonth(extracted.getMonth()-amount); } else { extracted=new Date(match[0].replace(/(?:Published|Updated|Posted):\s*/i,'')); } if(!isNaN(extracted.getTime()) && extracted<=today) return extracted.toISOString(); } catch(e){ console.warn('Failed to parse date', match[0], e); } } } return article.publishedAt; }
function toggleSourceFilter(sectionId,event){ event.stopPropagation(); const dropdown=document.getElementById(`source-filter-${sectionId}`); dropdown.classList.toggle('show'); if(dropdown.classList.contains('show') && dropdown.querySelector('#source-checkboxes-'+sectionId).innerHTML.includes('Loading')) populateSourceFilter(sectionId); }
document.addEventListener('click',e=>{ const dropdowns=document.querySelectorAll('.source-filter-content'); dropdowns.forEach(d=>{ if(d.classList.contains('show') && !d.contains(e.target)) d.classList.remove('show'); }); });
function populateSourceFilter(sectionId){ const section=newsSections.find(s=>s.id===sectionId); if(!section||!section.articles||section.articles.length===0) return; const sources=new Set(); section.articles.forEach(a=>{ if(a.source&&a.source.name) sources.add(a.source.name); }); const container=document.getElementById(`source-checkboxes-${sectionId}`); container.innerHTML=''; const prefs=getSourcePreferences(sectionId); Array.from(sources).sort().forEach(source=>{ const isChecked=prefs[source]!==false; const item=document.createElement('div'); item.className='source-filter-item'; item.innerHTML=`<input type="checkbox" data-source="${source}" ${isChecked?'checked':''}> <label>${source}</label>`; container.appendChild(item); const checkbox=item.querySelector('input'); checkbox.addEventListener('change',()=>{ updateSourcePreference(sectionId,source,checkbox.checked); applySourceFilter(sectionId); }); }); applySourceFilter(sectionId); }
function getSourcePreferences(sectionId){ const saved=localStorage.getItem(`news-sources-${sectionId}`); return saved?JSON.parse(saved):{}; }
function updateSourcePreference(sectionId,source,isEnabled){ const prefs=getSourcePreferences(sectionId); prefs[source]=isEnabled; localStorage.setItem(`news-sources-${sectionId}`, JSON.stringify(prefs)); }
function applySourceFilter(sectionId){ const section=newsSections.find(s=>s.id===sectionId); if(!section) return; const prefs=getSourcePreferences(sectionId); const hasFilters=Object.values(prefs).includes(false); const indicator=document.getElementById(`filter-indicator-${sectionId}`); if(indicator) indicator.style.display=hasFilters?'inline':'none'; displayNewsArticlesWithPagination(sectionId,section); }
function selectAllSources(sectionId){ const checkboxes=document.querySelectorAll(`#source-checkboxes-${sectionId} input[type="checkbox"]`); const prefs=getSourcePreferences(sectionId); checkboxes.forEach(cb=>{ cb.checked=true; prefs[cb.getAttribute('data-source')]=true; }); localStorage.setItem(`news-sources-${sectionId}`, JSON.stringify(prefs)); applySourceFilter(sectionId); }
function deselectAllSources(sectionId){ const checkboxes=document.querySelectorAll(`#source-checkboxes-${sectionId} input[type="checkbox"]`); const prefs=getSourcePreferences(sectionId); checkboxes.forEach(cb=>{ cb.checked=false; prefs[cb.getAttribute('data-source')]=false; }); localStorage.setItem(`news-sources-${sectionId}`, JSON.stringify(prefs)); applySourceFilter(sectionId); }
document.addEventListener('DOMContentLoaded',()=>{ console.log('🚀 Initializing Eagle Watchtower Dashboard...'); initDashboard(); });
